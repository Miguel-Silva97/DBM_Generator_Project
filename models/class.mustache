
const database = require('../database/sqlite-wrapper.js')('./Publish/Database/{{dbname}}');
const schema{{classTitle}} = require('../Schemas/Schema-{{classTitle}}.json');
const jsf = require('json-schema-faker');
const faker = require('faker');
jsf.extend('faker', () => { return faker });



class {{classTitle}} {
   constructor ({{constructorArguments}}) {
      {{#classConstructor}} 
   this.{{name}} = {{name}};
      {{/classConstructor}} 

      {{#classEnumerables}} 
   Object.defineProperty(this,"{{name}}", { enumerable: false });
      {{/classEnumerables}} 

      {{#classReferences}}
   Object.defineProperty(this, "{{name}}", { enumerable: false, writable: true });
      {{/classReferences}}
   Object.defineProperty(this,"{{primaryKey}}", { enumerable: false, writable: true });

 }

   static create() {
    return Object.assign(new {{classTitle}}(), jsf.generate(schema{{classTitle}}));
   }

   static all(callback){
      database.where("SELECT * FROM {{table}}", [] , {{classTitle}}, callback);
   }

   static get(id, callback){
      database.get("SELECT * FROM {{table}} WHERE id = ?", [id], {{classTitle}}, callback);
   }

   static delete(id, callback){
      database.run("DELETE FROM {{table}} WHERE id = ?", [id], callback);
   }

   static many(model, id, callback){
      let tablename = "{{classTitle}}".localeCompare(model) === -1 ? "{{classTitle}}_" + model : model
      + "_{{classTitle}}";
      database.where(`SELECT {{classTitle}}.*
      FROM {{classTitle}}
      INNER JOIN ${tablename} ON ${tablename}.{{classTitleLowerCase}}_id = {{classTitle}}.id
      WHERE ${tablename}.${model.toLowerCase()}_id = ?`, [id],
      {{classTitle}}, callback);
   }

   save ({{#manyToManyReferences}} {{modelReferenced}}Array, {{/manyToManyReferences}}callback){
      if({{manyToManyBoolean}} === false){
      if(this.id)
         database.run("UPDATE {{table}} SET {{&updateVariables}} WHERE id = ?", [{{thisVariables}}, this.id], callback);
      else
         database.run("INSERT INTO {{table}} ({{variables}}) VALUES ({{totalVariables}})", [{{thisVariables}}], callback);
      } else {

         if(this.id){
             database.run("UPDATE {{table}} SET {{&updateVariables}} WHERE id = ?", [{{thisVariables}}, this.id], callback);
             {{#manyToManyReferences}}
               
                  database.run("DELETE FROM {{table}}_{{modelReferenced}} WHERE {{tableThis}} = ?", this.id, callback);

                  {{modelReferenced}}Array.forEach(ref => {
                     database.run("INSERT INTO {{table}}_{{modelReferenced}} ({{tableThis}},{{modelThis}}) VALUES (? , ?)", [this.id, ref], callback);
                  });
             {{/manyToManyReferences}}
         } else {
            database.run("INSERT INTO {{table}} ({{variables}}) VALUES ({{totalVariables}})", [{{thisVariables}}], (cb) => {
               {{#manyToManyReferences}}
                  {{modelReferenced}}Array.forEach(ref => {
                     database.run("INSERT INTO {{table}}_{{modelReferenced}} ({{tableThis}},{{modelThis}}) VALUES (? , ?)", [cb.id, ref], callback);
                    });
               {{/manyToManyReferences}}
            });
            
         }

         
      }
   }
}

module.exports = {{classTitle}};
